use std::sync::Arc;

use super::{JniInto, FromJni};
use anyhow::Result;
use jni::{
    objects::{JObject, JString},
    JNIEnv,
};
use rscause_compiler::ast;

{{#each categories}}
impl FromJni for ast::{{this.name}} {
    fn from_jni<'local>(env: &mut JNIEnv, value: &JObject<'local>) -> Result<Self> {
      let class = env.get_object_class(value)?;
      let class_name: String = env
          .call_method(&class, "getSimpleName", "()Ljava/lang/String;", &[])?
          .l()?
          .jni_into(env)?;
      Ok(match class_name.as_str() {
          {{#each this.nodes}}
            "{{this.nodeName}}" => {
                ast::{{this.categoryName}}::{{this.variantName}}(value.jni_into(env)?)
            },
          {{/each}}
          _ => panic!("Unknown class name for {{this.name}}: {}", class_name)
      })
    }
}
{{/each}}

{{#each nodes}}
impl FromJni for ast::{{this.name}} {
    fn from_jni<'local>(env: &mut JNIEnv, value: &JObject<'local>) -> Result<Self> {
      let info = env
        .call_method(value, "getInfo", "()Lcom/dallonf/ktcause/ast/NodeInfo;", &[])?
        .l()?;
      let breadcrumbs = env
        .call_method(info, "getBreadcrumbs", "()Lcom/dallonf/ktcause/ast/Breadcrumbs;", &[])?
        .l()?
        .jni_into(env)?;
      {{#each this.fields}}
      let {{this.name}}: {{this.rsType}} = {
        let jni_node = env
          .call_method(value, "{{this.getterName}}", "(){{this.javaType}}", &[])?
          .l()?;
        let jni_node = JObject::from(jni_node);
        jni_node.jni_into(env)?
      };
      {{/each}}

      Ok(ast::{{this.name}} {
          breadcrumbs,
          {{#each this.fields}}
          {{this.name}},
          {{/each}}
      })
    }
}
{{/each}}