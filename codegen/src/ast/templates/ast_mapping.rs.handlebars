pub static J_BREADCRUMB_NAMES: &[&str] = &[
    {{#each breadcrumbNames}}
    "{{this}}",
    {{/each}}
];

{{#each categories}}
impl FromJni for ast::{{this.name}} {
    fn from_jni<'local>(env: &mut JNIEnv, value: &JObject<'local>) -> Result<Self> {
      noisy_log(env, "category {{this.name}}");
      let class = env.get_object_class(value)?;
      let class_name: String = env
          .call_method(&class, "getSimpleName", "()Ljava/lang/String;", &[])?
          .l()?
          .jni_into(env)?;
      Ok(match class_name.as_str() {
          {{#each this.nodes}}
            "{{this.nodeName}}" => {
                ast::{{this.categoryName}}::{{this.variantName}}(value.jni_into(env)?)
            },
          {{/each}}
          _ => panic!("Unknown class name for {{this.name}}: {}", class_name)
      })
    }
}
{{/each}}

{{#each nodes}}
impl FromJni for ast::{{this.name}} {
    fn from_jni<'local>(env: &mut JNIEnv, value: &JObject<'local>) -> Result<Self> {
      noisy_log(env, "node {{this.name}}");
      let info = env
        .call_method(value, "getInfo", "()Lcom/dallonf/ktcause/ast/NodeInfo;", &[])?
        .l()?
        .jni_into(env)?;
      {{#each this.fields}}
      let {{this.name}}_value: {{this.rsType}} = {
        let jni_node = env
          .call_method(value, "{{this.getterName}}", "(){{this.javaType}}", &[])?
        {{#if this.isBoolean}}
          .z()?;
        jni_node
        {{else}}
          .l()?;
        let jni_node = JObject::from(jni_node);
        jni_node.jni_into(env)?
        {{/if}}
      };
      {{/each}}

      Ok(ast::{{this.name}} {
          info,
          {{#each this.fields}}
          {{this.name}}: {{this.name}}_value,
          {{/each}}
      })
    }
}
{{/each}}