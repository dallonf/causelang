use std::sync::Arc;
use crate::breadcrumbs::{Breadcrumbs, HasBreadcrumbs};

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum AnyAstNode {
    {{#each nodes}}
    {{this.variantName}}({{this.name}}),
    {{/each}}
}
impl HasBreadcrumbs for AnyAstNode {
    fn breadcrumbs(&self) -> &Breadcrumbs {
        match self {
            {{#each nodes}}
            AnyAstNode::{{this.variantName}}(node) => &node.breadcrumbs,
            {{/each}}
        }
    }
}

{{#each categories}}
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum {{this.name}} {
    {{#each this.nodes}}
    {{this.variantName}}({{this.nodeName}}),
    {{/each}}
}
impl HasBreadcrumbs for {{this.name}} {
    fn breadcrumbs(&self) -> &Breadcrumbs {
        match self {
            {{#each this.nodes}}
            {{../name}}::{{this.variantName}}(node) => &node.breadcrumbs,
            {{/each}}
        }
    }
}

{{/each}}

{{#each nodes}}
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct {{this.name}} {
    pub breadcrumbs: Breadcrumbs,
    {{#each this.fields}}
    pub {{this.name}}: {{this.type}},
    {{/each}}
}
impl From<{{this.name}}> for AnyAstNode {
    fn from(node: {{this.name}}) -> Self {
        AnyAstNode::{{this.variantName}}(node)
    }
}
impl HasBreadcrumbs for {{this.name}} {
    fn breadcrumbs(&self) -> &Breadcrumbs {
        &self.breadcrumbs
    }
}

{{/each}}