fn main() {
  let var counter = 0
  effect Increment(amount: Int)
  effect ReadCounter: Int
  {
    loop(fn() {
      Log("current value: "->append(toString(cause ReadCounter())))
      Log("Type up/down/quit:")
      let input = (cause Prompt())->toLowerCase()
      switch {
        input->equals("up") {
          cause Increment(1)
        }
        input->equals("down") {
          cause Increment(-1)
        }
        input->equals("quit") {
          return Break()
        }
        match _ {
          cause Log("invalid input: "->append(input))
        }
      }
      Continue()
    }
  } handle Increment(let amount) {
    set counter =->add(amount)
  } handle ReadCounter {
    counter
  }
}

//probably part of the standard library
type Continue
type Break
type LoopResult = Variant(Continue, Break)

 // although this is very impure design that requires effects to not be infinite...
fn loop(loopFn: type fn(): LoopResult): Action  {
  switch loopFn() {
    Continue { loopFn() }
    Break { Action() }
  }
}