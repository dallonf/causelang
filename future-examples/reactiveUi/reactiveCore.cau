protected object ObservableTag<T>(protected tag: Tag)
protected object SubscriptionTag<T>(protected tag: Tag, observableTag: ObservableTag<T>)

protected signal NewObservable<T>(initial: T): ObservableTag<T>

object Subscriber<T> = fn(new: T, previous: T): Action
signal Subscribe<T>(observableTag: ObservableTag<T>, subscriber: Subscriber<T>): Object(
    currentValue: T,
    subscription: SubscriptionTag<T>,
)
signal Unsubscribe<T>(subscription: SubscriptionTag<T>): Action

signal Get<T>(observable: supports ObservableTag<T>): T
protected signal SetObservableValue<T>(observable: ObservableTag<T>, newValue: Variant(T, Setter<T>)): Action

protected object Observable<T>(
    currentValue: T,
    subscribers: TagMap<Subscriber<T>>,
)

interface ToObservableTag<T> {
    toObservableTag(this): T
}

support ToObservableTag<T> on ObservableTag<T> {
    fn toObservableTag(this) => this
}

handler ReactiveHandler() {
    let var observables = TagMap<Observable<Dynamic>>()

    effects {
        NewObservable(let initial) => {
            let tag = cause NewTag()
            observables = .add(tag, Observable(initial, List()))
            ObservableTag(tag)
        }
        Subscribe(let observableTag, let subscriber) => {
            let subscriptionTag = cause NewTag()
            observables = .set(observableTag.tag, fn(observable) {
                Observable(
                    params(observable),
                    subscribers = fn($) $.add(subscriptionTag, subscriber)),
                )
            })
            SubscriptionTag(subscriptionTag, observableTag)
        }
        Unsubscribe(let subscriptionTag) => {
            observables = .set(subscriptionTag.observableTag, fn(observable) {
                Observable(
                    params(observable),
                    subscribers = fn($) $.remove(subscriptionTag),
                )
            })
        }

        Get<T>(let $) => {
            let observableTag = $.toObservableTag()
            branch observables.get(observableTag.tag) {
                Exists(let observable: Observable<T>) => observable.currentValue
                default => cause Panic("matching observable not found for tag")
            }
        }
        SetObservableValue<T>(let observableTag, let newValue) => {
            branch observables.get(observableTag.tag) {
                Exists(let observable: Observable<T>) => {
                    let oldValue = observable.currentValue
                    observables = .set(observableTag.tag, fn($) Observable(
                        params($),
                        currentValue: newValue,
                    ))
                    observable.subscribers.each(fn(Pair(_, let $)) {
                        $(oldValue, newValue)
                    })
                }
                default => cause Panic("matching observable not found for tag")
            }
        }
    }

    effects {
        ValueHandler()
        ComputedHandler()
    }
}

// Value

protected object ValueTag<T>(protected tag: ObservableTag<T>)

support ToObservableTag<T> on ValueTag<T> {
    fn toObservableTag(this) => this.tag
}

signal NewValue<T>(initial: T): ValueTag<T>
signal SetValue<T>(value: ValueTag<T>, newValue: Variant(T, Setter<T>)): Action

handler ValueHandler() => effect {
    NewValue(let initial) => {
        let observableTag = cause NewObservable(initial)
        ValueTag(observableTag)
    }
    SetValue(let value, let newValue) => cause SetObservableValue(value.toObservableTag(), newValue)
}

// Computed

protected object ComputedTag<T>(protected tag: Tag)
object ComputedFn<T>(): T causes GetValue<Dynamic>

support ToObservableTag<T> on ComputedTag<T> {
    fn toObservableTag(this) => cause GetObservableTagForComputedTag(this)
}

signal NewComputed<T>(fn: ComputedFn<T>): Computed

object Computed<T> {
    observableTag: ObservableTag<T>
    fn: ComputedFn<T>
    subscriptions: SubscriptionTag[]
}

protected fn computeWithDependencies<T>(fn: ComputedFn<T>): Object(value: T, dependencies: List<ObservableTag>) {
    let var dependencies = Set<ObservableTag>()
    let result = {
        fn()
    } handle Get(let observable) {
        let observableTag = observable.toObservableTag()
        dependencies = .add(observableTag)
        cause Get(observableTag)
    }
    Object(result, dependencies.toList())
}

protected signal Recompute(computedTag: ComputedTag): Action
protected signal GetObservableTagForComputedTag<T>(computed: ComputedTag<T>): ObservableTag<T>

handler ComputedHandler() {
    let var computedMap = TagMap<Computed<Dynamic>>.new()

    effects {
        NewComputed<T>(let fn) => {
            match Object(let value, let dependencies) = computeWithDependencies(fn)
            let tag = cause NewTag()
            let observableTag = cause NewObservable(value)
        
            let computed = Computed<T>(observableTag, fn, List())
            let subscriptions = dependencies.map(fn(dependency) {
                match Object(let subscription) = cause Subscribe(dependency, fn() cause Recompute(tag))
            })
            computed = Computed(params(computed), subscriptions = subscriptions)
            computedMap = .set(tag, computed)
            ComputedTag(tag)
        }
        GetObservableTagForComputedTag<T>(ComputedTag(let tag)) => {
            computedMap.getOrPanic<Computed<T>>(tag).observableTag
        }
        Recompute(let computedTag = ComputedTag(let tag)) => {
            let computed = branch computed.getOrPanic(tag)
            
            // TODO: deal with potential circular dependencies
            computed.subscriptions.forEach(fn($) cause Unsubscribe($))

            match Object(let value, let dependencies) = computeWithDependencies(fn)
            computedMap = .set(tag, fn($) Computed(params($), subscriptions = subscriptions))
            cause SetObservableValue(tag.toObservableTag(), value)
        }
    }
}