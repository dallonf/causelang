protected type ValueTag<T>(protected tag: Tag)
protected type SubscriptionTag<T>(protected tag: Tag, valueTag: ValueTag<T>)

effect NewValue<T>(initial: T): ValueTag<T>

type Subscriber<T> = fn(new: T, previous: T): Action
effect Subscribe<T>(valueTag: ValueTag<T>, subscriber: Subscriber<T>): Object(
    currentValue: T,
    subscription: SubscriptionTag<T>,
)
effect Unsubscribe<T>(subscription: SubscriptionTag<T>): Action

effect GetValue<T>(value: ValueTag<T>): T
effect SetValue<T>(value: ValueTag<T>, newValue: Variant(T, Setter<T>)): Action

protected type Value<T>(
    currentValue: T,
    subscribers: TagMap<Subscriber<T>>,
)

handler ReactiveHandler {
    let var values = TagMap<Value<Dynamic>>()

    handle(
        NewValue(initial) => {
            let tag = cause NewTag()
            values = .add(tag, Value(initial, List()))
        }
        Subscribe(valueTag, subscriber) => {
            let subscriptionTag = cause NewTag()
            values = .set(valueTag.tag, fn(value) {
                Value(
                    params(value),
                    subscribers = fn($) $.add(subscriptionTag, subscriber)),
                )
            })
            SubscriptionTag(subscriptionTag, valueTag)
        }
        Unsubscribe(subscriptionTag) => {
            values = .set(subscriptionTag.valueTag, fn(value) {
                Value(
                    params(value),
                    subscribers = fn($) $.remove(subscriptionTag),
                )
            })
        }

        GetValue<T>(valueTag) => {
            branch values.get(valueTag.tag) {
                Exists(let value: Value<T>) => value.currentValue
                default => cause Panic("matching value not found for tag")
            }
        }

        SetValue<T>(valueTag, newValue) => {
            branch values.get(valueTag.tag) {
                Exists(let value: Value<T>) => {
                    let oldValue = value.currentValue
                    values = .set(valueTag.tag, fn($) Value(
                        params($),
                        currentValue: newValue,
                    ))
                    value.subscribers.each(fn(Pair(_, let $)) {
                        $(oldValue, newValue)
                    })
                }
                default => cause Panic("matching value not found for tag")
            }
        }
    )
}
