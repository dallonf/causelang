import lib/reactiveUi ( Component, e )
import lib/reactiveCore ( ObservableObject, Computed, reactiveScope )

// enable certain auto-conversions within lexical scope.
// these "use xScope" things might be useful for more kinds of sugar,
// but that's all I have in mind right now
use reactiveScope

let CounterApp = Component(
    // `function setup(...)` is equivalent to `setup = fn(...)`.
    // `factory {}` forms a block expression which returns an object,
    // and the object contains a field for each `export`ed name in the block
    function setup(props) => ObservableObject.new(factory {
        export let counter = 0
        export let counter2 = Computed.new(fn Integer.multiply(counter, 2))
    }),

    function render(props, state) {
        let increment = fn {
            // if parentheses are not provided and a single argument is passed,
            // it will be called `it`, like in Kotlin
            state.counter.set(fn it->add(1))
        }

        // `[]` is an object or list constructor that infers its type
        ["div", [], [
            ["h1", [], "Counter: ${state.counter}"],
            ["h2", [], "Counter x 2: ${state.counter2}"],
            ["button", [onClick = increment], "Increment"]
        ]]

        // alternatively, a Kotlin-like DSL
        e.div() {
            element.h1() { "Counter: ${state.counter}" }
            element.h2() { "Counter x 2: ${state.counter2}" }
            element.button(onClick = increment) { "Increment" }
        }
    },
)