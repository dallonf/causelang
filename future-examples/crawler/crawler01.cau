import core/collection { map, flatMap, Set }
import shell/http
import lib/htmlParse

signal CrawlerCacheCheck(url: String): Obj(alreadyCrawled: Bool)

fn main() {
    let crawlUrl = "http://meanwhilegames.dallonf.com"
    let var alreadyCrawledSet = Set.new()

    let links = {
       crawl(crawlUrl)
    } effect http.Signal(let e) {
        http.handler(e)
    } effect http.Error(let e) {
        cause Panic(e)
    } effect CrawlerCacheCheck(let url) {
        let alreadyCrawled = alreadyCrawledSet->Set.contains(url)
        if !alreadyCrawled {
            alreadyCrawledSet = alreadyCrawledSet->Set.add(url)
        }
        alreadyCrawled
    }
    
    cause Log(links)
}

fn crawl(url: String) {
    let alreadyCrawled = cause CrawlerCacheCheck(url)

    let result = cause http.request("GET", crawlUrl)
    cause Assertion.Equal("text/html", result->http.header("Content-Type"))
    let body = result.body
    let links = htmlParse.parse(body)
        ->htmlParse.find("a")
        ->map(htmlParse.attr("href"))

    links->flatMap(crawl)
}