import collection.{ map, firstSome }

export type DiceSide: Variant(
    type Rock,
    type Paper,
    type Scissors,
    type Dynamite,
    type Strawman,
    type Shield,
)

export type RollOffWinner: Variant(type LeftWin, type RightWin, type Tie)

export type RollOffResult: {
    winner: RollOffWinner
    leftExtras: List<String>
    rightExtras: List<String>
}

fn RollOffResult.withWinner(winner: RollOffWinner) {
    RollOffResult(
        winner,
        leftExtras = List(),
        rightExtras = List(),
    )
}

type RuleFn: Fn(leftDie: DiceSide, rightDie: DiceSide): Option<RollOffResult>

// Explicit function output annotations are allowed but not required
fn beatsRule(winner: DiceSide, loser: DiceSide): RuleFn {
    // Types are ordinarily nominal, but it's not shy at all about
    // coercing implicitly typed literals to named types where the context suggests it
    // If the context (the explicit return type) didn't suggest it, 
    // not providing parameter types here would be an error
    fn(left, right) {
        // Like Go's `switch`, not providing any value matches "true"
        match {
            both(left->equals(winner), right->equals(loser)) {
                Some(RollOffResult.withWinner(RollOffWinner.LeftWin))
            }
            both(left->equals(loser), right->equals(winner)) {
                Some(RollOffResult.withWinner(RollOffWinner.RightWin))
            }
            _ { None }
        }
    }
}

export fn rollOff(leftDie: DiceSide, rightDie: DiceSide) => RollOffResult {
    let rules = List<RuleFn>(
        // Shield causes a tie and adds a "shield" extra
        fn(left, right) {
            let leftIsShield = left->equals(DiceSide.Shield)
            let rightIsShield = right->equals(DiceSide.Shield)
            if either(leftIsShield, rightIsShield) {
                Some(RollOffResult{
                    winner: RollOffWinner.Tie
                    leftExtras: if leftIsShield { List("shield") } else { List() }
                    rightExtras: if rightIsShield { List("shield") } else { List() }
                })
            } else {
                None
            }
        },
        // If both are the same, they tie
        fn(left, right) {
            if left->equals(right) {
                Some(RollOffResult.withWinner(RollOffWinner.Tie))
            } else {
                None
            }
        },
        // Strawman loses to all
        fn(left, right) {
            match {
                left->equals(DiceSide.Strawman) {
                    Some(RollOffResult.withWinner(RollOffWinner.RightWin))
                }
                right->equals(DiceSide.Strawman) {
                    Some(RollOffResult.withWinner(RollOffWinner.LeftWin))
                }
                _ { None }
            }
        },
        // Dynamite beats all
        fn(left, right) {
            match {
                left->equals(DiceSide.Dynamite) {
                    Some(RollOffResult.withWinner(RollOffWinner.LeftWin))
                }
                right->equals(DiceSide.Dynamite) {
                    Some(RollOffResult.withWinner(RollOffWinner.RightWin))
                }
                _ -> { None }
            }
        },
        // Standard RPS
        beatsRule(winner=DiceSide.Rock, loser=DiceSide.Scissors)
        beatsRule(winner=DiceSide.Scissors, loser=DiceSide.Paper)
        beatsRule(winner=DiceSide.Paper, loser=DiceSide.Rock)
    )

    return rules ...
        -> map(fn(a) a(leftDie, rightDie))
        -> firstSome()
        -> fn(a)
            match a {
                Some(let result) { result }
                None { Some(RollOffResult.withWinner(RollOffWinner.Tie)) }
            }
}