import collection { map, first_that_exists }

let DiceSide = oneof(
	object Rock,
	object Paper,
	object Scissors,
	object Dynamite,
	object Strawman,
	object Shield,
)

let RollOffWinner = oneof(object LeftWin, object RightWin, object Tie)

object RollOffResult(
	winner: RollOffWinner
	left_extras: List<String>
	right_extras: List<String>
) {
	function with_winner(winner: RollOffWinner) {
		RollOffResult(
			winner,
			left_extras = List(),
			right_extras = List(),
		)
	}
}

private let RuleFn = Function(left_die: DiceSide, right_die: DiceSide, returns Option<RollOffResult>)

// Explicit function output annotations are allowed but not required
private fn beats_rule(winner: DiceSide, loser: DiceSide, returns RuleFn) {
	fn(left, right) {
		branch {
			if both(left>>equals(winner), right_equals(loser)) =>
				RollOffResult.with_winner(RollOffWinner.LeftWin)
			if both(left>>equals(loser), right>>equals(winner)) =>
				RollOffResult.with_winner(RollOffWinner.RightWin)
			else => Nothing
		}
	}
}

fn roll_off(left_die: DiceSide, right_die: DiceSide, returns RollOffResult) {
	let rules = List<RuleFn>(
		// Shield causes a tie and adds a "shield" extra
		fn(left, right) {
			let left_is_shield = left>>equals(DiceSide.Shield)
			let right_is_shield = right>>equals(DiceSide.Shield)
			if either(left_is_shield, right_is_shield) {
				RollOffResult{
					winner: RollOffWinner.Tie
					left_extras: if left_is_shield => List("shield") else => List()
					right_extras: if right_is_shield => List("shield") else => List()
				}
			} else {
				Nothing
			}
		},
		// If both are the same, they tie
		fn(left, right) {
			if left>>equals(right) {
				RollOffResult.with_winner(RollOffWinner.Tie)
			} else {
				Nothing
			}
		},
		// Strawman loses to all
		fn(left, right) {
			branch {
				if left>>equals(DiceSide.Strawman) =>
					RollOffResult.with_winner(RollOffWinner.RightWin)
				if right>>equals(DiceSide.Strawman) =>
					RollOffResult.with_winner(RollOffWinner.LeftWin)
				else => Nothing
			}
		},
		// Dynamite beats all
		fn(left, right) {
			branch {
				if left>>equals(DiceSide.Dynamite) =>
					RollOffResult.with_winner(RollOffWinner.LeftWin)
				if right>>equals(DiceSide.Dynamite) =>
					RollOffResult.with_winner(RollOffWinner.RightWin)
				else => Nothing
			}
		},
		// Standard RPS
		beats_rule(winner=DiceSide.Rock, loser=DiceSide.Scissors)
		beats_rule(winner=DiceSide.Scissors, loser=DiceSide.Paper)
		beats_rule(winner=DiceSide.Paper, loser=DiceSide.Rock)
	)

	return rules
		>> map() {it(left_die, right_die)}
		>> first_that_exists()
		>> pipe() {branch with it {
			is Not<Nothing> as result => result
			is Nothing => RollOffResult.with_winner(RollOffWinner.Tie)
		}
}